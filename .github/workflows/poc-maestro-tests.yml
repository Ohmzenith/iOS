name: "POC maestro tests"
on:
  workflow_dispatch: {}
  push: 
    branches:
      - kshann/maestro-poc
jobs:
  build-app-for-testing:
    runs-on: macos-14-xlarge

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set cache key hash
      run: |
         has_only_tags=$(jq '[ .pins[].state | has("version") ] | all' DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
         if [[ "$has_only_tags" == "true" ]]; then
           echo "cache_key_hash=${{ hashFiles('DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV
         else
           echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
         fi

    - name: Cache SPM
      if: env.cache_key_hash
      uses: actions/cache@v3
      with:
        path: DerivedData/SourcePackages
        key: ${{ runner.os }}-spm-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_$(<.xcode-version).app/Contents/Developer

    - name: Build for tests
      run: |
        set -o pipefail && xcodebuild \
          -scheme "DuckDuckGo" \
          -destination "platform=iOS Simulator,name=iPhone 15,OS=17.4" \
          -derivedDataPath "DerivedData" \
          -skipPackagePluginValidation \
          -skipMacroValidation \
          ONLY_ACTIVE_ARCH=NO \
        | tee xcodebuild.log

    - name: Store Binary
      uses: actions/upload-artifact@v4
      with:
        name: duckduckgo-ios-app
        path: DerivedData/Build/Products/Debug-iphonesimulator/DuckDuckGo.app

  run-tests:
    name: Run tests
    needs: build-app-for-testing
    runs-on: macos-14-xlarge
    timeout-minutes: 60
    strategy:
      matrix:
        test-tag: ['release', 'privacy', 'securityTest', 'adClick']
      fail-fast: false

    steps:
    - name: Start iOS Simulator
      run: |
        DEVICE_ID=$(xcrun simctl list devices available --json | jq -r '.devices["com.apple.CoreSimulator.SimRuntime.iOS-17-4"][] | select(.name == "iPhone 15") | .udid' | head -n 1)
        DEVICE_STATE=$(xcrun simctl list devices available --json | jq -r --arg DEVICE_ID "$DEVICE_ID" '.devices[] | .[] | select(.udid == $DEVICE_ID) | .state')
        
        echo "Picked device $DEVICE_ID in state: $DEVICE_STATE"

        if [ -z "$DEVICE_ID" ]; then
          echo "No available simulator found for the criteria."
          exit 1
        fi
        
        echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
        
        if [ "$DEVICE_STATE" != "Booted" ]; then
          echo "Booting iOS device "$DEVICE_ID""
          xcrun simctl boot "$DEVICE_ID"
          sleep 30
        else
          echo "Simulator with DEVICE_ID=$DEVICE_ID is already booted."
        fi

        DEVICE_STATE=$(xcrun simctl list devices available --json | jq -r --arg DEVICE_ID "$DEVICE_ID" '.devices[] | .[] | select(.udid == $DEVICE_ID) | .state')
        echo "Device currently in state: $DEVICE_STATE"]

    - name: Check out the code
      uses: actions/checkout@v4

    - name: Install deps
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        brew tap facebook/fb
        brew install facebook/fb/idb-companion
        echo "${HOME}/.maestro/bin" >> $GITHUB_PATH

    - name: Retrieve Binary
      uses: actions/download-artifact@v4
      with:
        name: duckduckgo-ios-app
        path: DerivedData/Build/Products/Debug-iphonesimulator/DuckDuckGo.app

    - name: Install App onto simulator
      run: |
        xcrun simctl install $DEVICE_ID DerivedData/Build/Products/Debug-iphonesimulator/DuckDuckGo.app

    - name: Run simctl in background
      run: |
        nohup xcrun simctl io $DEVICE_ID recordVideo --codec=h264 --f ${{ matrix.test-tag }}.mp4 >/dev/null 2>&1 &
        echo $! > save_pid.txt

    - name: Run ${{ matrix.test-tag }} Tests
      run: |
        maestro test --format junit --output results.xml .maestro --include-tags ${{ matrix.test-tag }}
    
    - name: Publish unit tests report
      if: ${{ success() || failure() }}
      uses: mikepenz/action-junit-report@v4
      with:
        check_name: "Test Report ${{ matrix.test-tag }}"
        report_paths: results.xml

    - name: Stop recording
      if: ${{ always() }}
      run: |
        kill -SIGINT $(cat save_pid.txt)

    - name: Upload recording
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ${{ matrix.test-tag }}.mp4
        path: ${{ matrix.test-tag }}.mp4